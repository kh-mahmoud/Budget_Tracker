// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String        @unique
  email        String        @unique
  username     String
  firstName    String
  lastName     String
  currency     Currencies    @default(USD)
  photo        String
  role         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transaction  Transaction[]
  Projects     Project[]
  GroupOwners  Group[]       @relation("admin", fields: [groupAdmins], references: [id])
  groupAdmins  String[]      @db.ObjectId
  Groupmember  Group[]       @relation("member", fields: [groupMembers], references: [id])
  groupMembers String[]      @db.ObjectId
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  OrgId       String?       @unique
  title       String
  description String?
  creator     User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String        @db.ObjectId
  group       Group?        @relation(fields: [groupId], references: [id])
  groupId     String?       @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transactions Transaction[] @relation(onDelete: Cascade)
}


model Group {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  OrgId    String    @unique
  owners   User[]    @relation("admin", fields: [ownerId], references: [id])
  ownerId  String[]  @db.ObjectId
  slug     String
  image    String?
  members  User[]    @relation("member", fields: [memberId], references: [id])
  memberId String[]  @db.ObjectId
  Project  Project[]
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name      String
  projectId String
  userId    String
  icon      String
  type      Types    @default(income)

  @@unique([name, type, userId])
  @@index([name])
}

model Transaction {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
  amount       Float
  description  String?
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String   @db.ObjectId
  date         DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  type         Types    @default(income)
  category     String
  categoryIcon String
}

model MonthHistory {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  projectId String
  day       Int
  month     Int
  year      Int
  income    Float
  expense   Float

  @@unique([day, month, year, userId])
}

model YearHistory {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  projectId String
  month     Int
  year      Int
  income    Float
  expense   Float

  @@unique([month, year, userId])
}

enum Currencies {
  USD
  EUR
  JPY
  GBP
  DZ
}

enum Types {
  income
  expense
}
